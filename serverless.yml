#serverless.yml
tenant: laimasoftrs
app: audiobook-manager
service: audiobook-backend



custom:
  bucket: 'lsft-audiobook-manager-${opt:stage}'
  uploadDirectory: 'uploads'
  deployBucket: 'serverless-deploy-all-lsft-projects'
  tableName: 'audiobooks-${opt:stage}'
  dynamodb:
    start:
      migrate: true

plugins:
  - upload-test-file-plugin
  - serverless-dynamodb-local
  - serverless-offline

provider:
  name: aws
  runtime: nodejs12.x
  stage: qa
  region: us-east-1
  deploymentBucket: ${self:custom.deployBucket}
  s3:
    bucketOne:
      name: ${self:custom.bucket}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - {"Fn::GetAtt": ["UsersDynamoDBTable", "Arn"]}
        - {"Fn::Join" : [ "/", ["Fn::GetAtt": ["UsersDynamoDBTable", "Arn"], "index/GSI1"] ]}
        - {"Fn::Join" : [ "/", ["Fn::GetAtt": ["UsersDynamoDBTable", "Arn"], "index/GSI2"] ]}
    - Effect: Allow
      Action:
        - s3:PutObject
        - s3:GetObject
        - s3:ListObject
        - s3:ListBucket
      Resource: "arn:aws:s3:::${self:custom.bucket}/*"        
  environment:
    BOOK_TABLE: ${self:custom.tableName}
    BUCKET: ${self:custom.bucket}


functions:
  books:
    handler: api/index.handler
    events:
      - http: ANY /
      - http: 'ANY {proxy+}'
  uploader:
    handler: uploader/process.insert
    events:
      - s3:
          bucket: ${self:custom.bucket}
          event: s3:ObjectCreated:*
          rules:
            - prefix: uploads/
            - suffix: .xlsx
          existing: true
    environment: 
      KEY_PREFIX: ${self:custom.uploadDirectory}



resources:
  Resources:
    UploadBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.bucket}
        AccessControl: Private
        CorsConfiguration:
          CorsRules:
          - AllowedMethods:
            - GET
            - PUT
            - POST
            - HEAD
            AllowedOrigins:
            - "*"
            AllowedHeaders:
            - "*"    
    UsersDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          - AttributeName: PKhash
            AttributeType: S
          - AttributeName: SKsort
            AttributeType: S
          - AttributeName: Status
            AttributeType: S
        KeySchema:
          - AttributeName: PKhash
            KeyType: HASH
          - AttributeName: SKsort
            KeyType: RANGE  
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        TableName: ${self:custom.tableName} 
        GlobalSecondaryIndexes:
        - IndexName: GSI1
          KeySchema:
          - AttributeName: SKsort
            KeyType: HASH
          - AttributeName: PKhash
            KeyType: RANGE
          Projection:
            NonKeyAttributes:
              - asin
              - title 
              - author
              - username
              - Status
              - dateRecorded
              - PURCHASED
              - WISHLIST
              - LISTENED
            ProjectionType: INCLUDE
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5            
        - IndexName: GSI2
          KeySchema:
          - AttributeName: Status
            KeyType: HASH
          - AttributeName: PKhash
            KeyType: RANGE
          Projection: 
            ProjectionType: KEYS_ONLY
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5


